params {
    out_dir = "output"
    wf {
        container_sha_cloneval = "sha0ebc91d22c0ea5183272af8bf2b96ca51e88ad5d"
        container_sha_medaka = "sha447c70a639b8bcf17dc49b51e74dfcde6474837b"
        common_sha = "sha9ef2f4e4585c4ce6a604616e77185077551abf50"
        container_sha_canu = "shabbdea3813f6fb436ea0cbaa19958ad772db9154c"
        plannotate_sha = "shaf7f37f751dd0bc529121b765fb63322502288a03"
    }
}

// used by default for "standard" (docker) and singularity profiles,
// other profiles may override.
process {
    withLabel:wfplasmid {
        container = "ontresearch/wf-clone-validation:${params.wf.container_sha_cloneval}"
    }
    withLabel:canu {
        container = "ontresearch/canu:${params.wf.container_sha_canu}"
    }
    withLabel:medaka {
        container = "ontresearch/medaka:${params.wf.container_sha_medaka}"
    }
    withLabel:wf_common {
        container = "ontresearch/wf-common:${params.wf.common_sha}"
    }
    withLabel:plannotate {
        container = "ontresearch/plannotate:${params.wf.plannotate_sha}"
    }
    shell = ['/bin/bash', '-euo', 'pipefail']
}

profiles {
    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
    }

    // using singularity instead of docker
    singularity {
        singularity {
            enabled = true
            autoMounts = true
        }
    }

    conda {
        conda.enabled = true
    }

    // Using AWS batch.
    // May need to set aws.region and aws.batch.cliPath
    awsbatch {
        process {
            executor = 'awsbatch'
            queue = "${params.aws_queue}"
            memory = '8G'
            withLabel:wfplasmid {
                container = "${params.aws_image_prefix}-wf-clone-validation:${params.wf.container_sha_cloneval}"
            }
            withLabel:medaka {
                container = "${params.aws_image_prefix}-medaka:${params.wf.container_sha_medaka}"
            }
            withLabel:canu {
                container = "${params.aws_image_prefix}-canu:${params.wf.container_sha_canu}"
            }
            withLabel:wf_common {
                container = "${params.aws_image_prefix}-wf-common:${params.wf.common_sha}"
            }
            withLabel:plannotate {
                container = "${params.aws_image_prefix}-plannotate:${params.wf.plannotate_sha}"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }
    aws.region = 'eu-west-1'
    aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'

    // local profile for simplified development testing
    local {
        process.executor = 'local'
    }
}

timeline {
  enabled = true
  file = "${params.out_dir}/execution/timeline.html"
  timeline.overwrite = true
}
report {
  enabled = true
  file = "${params.out_dir}/execution/report.html"
  report.overwrite = true
}
trace {
  enabled = true
  file = "${params.out_dir}/execution/trace.txt"
  trace.overwrite = true
}
env {
        PYTHONNOUSERSITE = 1
        JAVA_TOOL_OPTIONS = "-Xlog:disable -Xlog:all=warning:stderr"
}